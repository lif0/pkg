name: After merge pull request

on:
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  release:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Validate branch name
        id: validate
        run: |
          BRANCH="${{ github.event.pull_request.head.ref }}"
          echo "➡️ PR branch: $BRANCH"

          DATE=$(date -d "${{ github.event.pull_request.merged_at }}" +"%Y-%m-%d")
          echo "date=$DATE" >> $GITHUB_OUTPUT

          if [[ ! "$BRANCH" =~ ^release/[a-zA-Z0-9_-]+/v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "ℹ️ Not a release PR — skipping release."
            echo "release=false" >> $GITHUB_OUTPUT
          else
            echo "✅ Release branch detected."
            echo "release=true" >> $GITHUB_OUTPUT
            MODULE=$(echo "$BRANCH" | cut -d'/' -f2)
            VERSION=$(echo "$BRANCH" | cut -d'/' -f3)
            TAG="$MODULE/$VERSION"
            echo "module=$MODULE" >> $GITHUB_OUTPUT
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "tag=$TAG" >> $GITHUB_OUTPUT
          fi

      - name: Write summary
        uses: actions/github-script@v7
        with:
          script: |
            const release = '${{ steps.validate.outputs.release }}'
            if (release !== 'true') {
              core.summary
                .addHeading('ℹ️ Not a release PR')
                .addRaw('This pull request does not trigger a release.')
                .write()
            } else {
              core.summary
                .addHeading('✅ Release created')
                .addRaw(`Module: **${{ steps.validate.outputs.module }}**\nVersion: **${{ steps.validate.outputs.version }}**\nTag: **${{ steps.validate.outputs.tag }}**`)
                .write()
            }

      - name: Generate changelog
        if: steps.validate.outputs.release == 'true'
        id: changelog
        uses: actions/github-script@v7
        with:
          script: |
            const releasePR = context.payload.pull_request
            const releaseBranch = releasePR.head.ref

            // Fetch PRs that were merged into this release branch
            const { data: mergedIntoRelease } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: "closed",
              base: releaseBranch
            })

            let changes = "## Changes included in this release\n"
            for (const pr of mergedIntoRelease) {
              if (pr.merged_at) {
                changes += `- [#${pr.number}](${pr.html_url}) ${pr.title} (@${pr.user.login})\n`
              }
            }

            core.setOutput("changelog", changes)

      - name: Create Release
        if: steps.validate.outputs.release == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.validate.outputs.tag }}
          release_name: ${{ steps.validate.outputs.module }} ${{ steps.validate.outputs.version }}
          body: |
            ### Release 
            - Date: ${{ steps.validate.outputs.date }}
            - Release: `${{ steps.validate.outputs.tag }}`
            

            ${{ steps.changelog.outputs.changelog }}

            ### Installation
            ```bash
            go get github.com/${{ github.repository }}/${{ steps.validate.outputs.module }}@${{ steps.validate.outputs.version }}
            ```