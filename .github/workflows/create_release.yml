name: 🧰 Go Module Release (UI)

on:
  workflow_dispatch:
    inputs:
      go_mod_path:
        description: "Относительный путь до go.mod (например: packages/concurrency/go.mod)"
        required: true
      version:
        description: "Версия (например: v1.0.0 или 1.0.0 — префикс v добавится)"
        required: true
      tag_template:
        description: "Шаблон тега: можно {dir}, {module}, {module_path}, {version}"
        required: false
        default: "{dir}/{version}"
      make_latest:
        description: "Пометить как latest"
        type: choice
        options: ["false", "true", "legacy"]
        default: "false"
      prerelease:
        description: "Пререлиз? (оставьте пустым для автоопределения по суффиксу версии)"
        required: false

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout selected branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.ref }}

      - name: Parse inputs & compute tag/name
        id: vars
        shell: bash
        run: |
          set -euo pipefail
          GO_MOD="${{ inputs.go_mod_path }}"
          VERSION_IN="${{ inputs.version }}"
          TAG_TMPL="${{ inputs.tag_template }}"
          MAKE_LATEST="${{ inputs.make_latest }}"
          INPUT_PRERELEASE="${{ inputs.prerelease || '' }}"

          if [[ ! -f "$GO_MOD" ]]; then
            echo "::error::Файл '$GO_MOD' не найден."
            exit 1
          fi

          # module path from go.mod
          MODULE_PATH="$(awk '/^module[[:space:]]+/ {print $2; exit}' "$GO_MOD")"
          if [[ -z "$MODULE_PATH" ]]; then
            echo "::error::Не удалось извлечь module path из '$GO_MOD'."
            exit 1
          fi

          # directory of module (relative)
          DIR_REL="$(dirname "$GO_MOD")"
          [[ "$DIR_REL" == "." ]] && DIR_REL=""

          # module name (basename of module path)
          MODULE_NAME="$(basename "$MODULE_PATH")"

          # normalize version: add leading 'v' if missing
          VERSION="$VERSION_IN"
          [[ "$VERSION" =~ ^v ]] || VERSION="v${VERSION}"

          # default prerelease: auto by suffix (contains '-')
          PRERELEASE="false"
          if [[ -n "$INPUT_PRERELEASE" ]]; then
            shopt -s nocasematch
            if [[ "$INPUT_PRERELEASE" =~ ^(1|true|yes|y)$ ]]; then PRERELEASE="true"; fi
            if [[ "$INPUT_PRERELEASE" =~ ^(0|false|no|n)$ ]]; then PRERELEASE="false"; fi
            shopt -u nocasematch
          else
            if [[ "$VERSION" == *"-"* ]]; then PRERELEASE="true"; fi
          fi

          # render tag from template
          DIR_FOR_TAG="$DIR_REL"
          TAG="$TAG_TMPL"
          TAG="${TAG//\{dir\}/$DIR_FOR_TAG}"
          TAG="${TAG//\{module\}/$MODULE_NAME}"
          TAG="${TAG//\{module_path\}/$MODULE_PATH}"
          TAG="${TAG//\{version\}/$VERSION}"

          # Cleanup: remove leading slash if dir is empty
          TAG="${TAG#/}"

          # basic validation
          if [[ -z "$TAG" ]]; then
            echo "::error::Пустой тег после применения шаблона. Проверьте inputs."
            exit 1
          fi

          NAME="$MODULE_NAME $VERSION"

          echo "module_path=$MODULE_PATH" >> "$GITHUB_OUTPUT"
          echo "module_name=$MODULE_NAME" >> "$GITHUB_OUTPUT"
          echo "dir_rel=$DIR_REL" >> "$GITHUB_OUTPUT"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "tag=$TAG" >> "$GITHUB_OUTPUT"
          echo "name=$NAME" >> "$GITHUB_OUTPUT"
          echo "make_latest=$MAKE_LATEST" >> "$GITHUB_OUTPUT"
          echo "prerelease=$PRERELEASE" >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.vars.outputs.tag }}
          name: ${{ steps.vars.outputs.name }}
          target_commitish: ${{ github.sha }}
          generate_release_notes: true
          make_latest: ${{ steps.vars.outputs.make_latest }}
          draft: false
          prerelease: ${{ steps.vars.outputs.prerelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}